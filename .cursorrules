# MarkItDown Project Rules for Cursor AI

## Project Overview
This is a desktop application for Windows that converts web articles into clean Markdown files. The application features a GUI built with PySide6 and supports batch conversions, image downloading, and special handling for complex websites like WeChat articles.

## Technology Stack
- **Language**: Python
- **GUI Framework**: PySide6 (primary), Tkinter (fallback)
- **Dependencies**: MarkItDown, BeautifulSoup4
- **Configuration**: JSON-based settings (`setting.json`)

## Development Conventions
- **Follow the detailed architecture design in `reference/RefactorPlan.md`**
- **ALWAYS update `reference/RefactorPlan.md` when implementing new features or completing planned tasks**
- **Keep the refactor plan as the single source of truth for project architecture and roadmap**
- Use ViewModel pattern to separate UI from business logic
- Execute long-running tasks in background threads
- Maintain modular architecture with clear separation of concerns
- Use JSON for configuration import/export
- Main entry point: `MarkURLdown.pyw`

## Code Style
- Follow Python PEP 8 conventions
- Use type hints where appropriate
- Write clear docstrings for functions and classes
- Maintain consistent error handling patterns

## Architecture & Design
- **Follow the comprehensive architecture design in `reference/RefactorPlan.md`**
- **Core Logic**: `markitdown_app/core/` - HTML to Markdown conversion, image processing, filename generation
- **Services**: `markitdown_app/services/` - Background thread management for UI responsiveness
- **I/O**: `markitdown_app/io/` - File operations, configuration management, logging
- **UI**: `markitdown_app/ui/` - PySide6 GUI implementation with ViewModel pattern
- **Types**: `markitdown_app/app_types/` - Custom data types and structures
- **Handlers**: Use site-specific handlers with inline crawler implementations
- **Converters**: Support multiple input types (URL, HTML, files)
- **Registry**: Use registration system for handlers and converters

## Testing
- **ALWAYS use the existing test framework in the `tests/` directory**
- **NEVER create temporary test files in the project root directory**
- **Follow the detailed testing strategy in `reference/TESTING_STRATEGY.md`**
- Use Python's built-in `unittest` framework for unit tests
- Use custom integration test scripts for end-to-end testing
- Follow the existing test structure and naming conventions
- Focus on core conversion functionality
- Test GUI responsiveness during batch operations
- Verify image downloading and processing
- Test configuration import/export features

## Documentation Maintenance
- **ALWAYS update `reference/RefactorPlan.md` when making architectural changes**
- **Mark completed tasks with âœ… in the implementation steps section**
- **Add new features to the roadmap section with clear implementation plans**
- **Update architecture diagrams and component descriptions when structure changes**
- **Keep the refactor plan synchronized with actual code implementation**
- **Document design decisions and architectural evolution in the plan**
